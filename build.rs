extern crate cbindgen;

use std::env;
use std::path::PathBuf;

fn generate_c_headers() {
    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let output_dir = PathBuf::from(&crate_dir).join("include");
    std::fs::create_dir_all(&output_dir).expect("Failed to create include directory");

    let header_path = output_dir.join("zkp2p_ffi.h");

    cbindgen::Builder::new()
        .with_crate(crate_dir)
        .with_language(cbindgen::Language::C)
        .with_header("/* ZKP2P TLSNotary FFI - Auto Generated */")
        .with_autogen_warning("/* Warning: Auto-generated by cbindgen. Do not modify manually. */")
        .with_include_guard("ZKP2P_FFI_H")
        .include_item("zkp2p_init")
        .include_item("zkp2p_cleanup")
        .include_item("zkp2p_prove")
        .include_item("zkp2p_verify")
        .include_item("zkp2p_get_last_error")
        .include_item("zkp2p_free_error_string")
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file(header_path);
}

fn main() {
    // Tell Cargo that if the given file changes, to rerun this build script.
    println!("cargo:rerun-if-changed=src/lib.rs");
    println!("cargo:rerun-if-changed=src/ffi/mod.rs");

    // Platform-specific linking configuration
    let target_os = env::var("CARGO_CFG_TARGET_OS").unwrap();
    match target_os.as_str() {
        "ios" => {
            println!("cargo:rustc-link-arg=-undefined");
            println!("cargo:rustc-link-arg=dynamic_lookup");
        }
        "android" => {
            println!("cargo:rustc-link-arg=-Wl,--allow-shlib-undefined");
        }
        _ => {}
    }

    generate_c_headers();
}
